import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Con, Row, Col } from 'bee-layout';
import { Panel } from 'bee-panel';
import Drawer from 'bee-drawer';
import Clipboard from 'bee-clipboard'; 
import Button from '../src';



var Demo1 = require("./demolist/Demo1");var Demo2 = require("./demolist/Demo2");var Demo3 = require("./demolist/Demo3");var Demo4 = require("./demolist/Demo4");var Demo5 = require("./demolist/Demo5");var Demo6 = require("./demolist/Demo6");var Demo7 = require("./demolist/Demo7");var Demo8 = require("./demolist/Demo8");var DemoArray = [{"example":<Demo1 />,"title":" 默认的消息提醒","code":"/**\r\n *\r\n * @title 默认的消息提醒\r\n * @description 通过 `color` 参数切换风格【提供 `light` 和 `dark` 两种默认风格的消息提醒】。若不设置该属性，默认值为`light`。\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\r\n\n\r\n\r\nconst dark = function () {\r\n    Message.destroy();\r\n    Message.create({content: '新单据状态更新，请在审批中心查看最新状态。', color: \"dark\", duration:3});\r\n};\r\nconst light = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据提交成功。', color: \"light\"});\r\n};\r\n\r\nclass Demo1 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"paddingDemo\">\r\n            <Button\r\n                colors=\"dark\"\r\n                onClick={dark}>\r\n                dark\r\n            </Button>\r\n            <Button\r\n                shape=\"border\"\r\n                onClick={light}>\r\n                light\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Demo1;\r\n","desc":" 通过 `color` 参数切换风格【提供 `light` 和 `dark` 两种默认风格的消息提醒】。若不设置该属性，默认值为`light`。"},{"example":<Demo2 />,"title":" 通栏样式","code":"/**\n *\n * @title 通栏样式\n * @description 顶部通栏消息提醒。通过 `style` 参数给 Message 组件添加样式。\n *\n */\n\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\n\n\nconst success1 = function () {\n    Message.destroy();\n    Message.create({\n        content: '新单据状态更新，请在审批中心查看最新状态。', \n        color: \"success\",\n        duration: 30,\n        style: {width:'100%', top:0, left:0, transform:'none'}\n    });\n};\nconst success2 = function () {\n    Message.destroy();\n    Message.create({\n        content: '新单据状态更新，请在审批中心查看最新状态。', \n        color: \"success\",\n        position: 'bottom',\n        duration: 30,\n        style: {width:'100%', bottom:0, left:0, transform:'none'}\n    });\n};\n\nclass Demo2 extends Component {\n    constructor(props){\n        super(props);\n    }\n    render () {\n        return (\n            <div className=\"paddingDemo\">\n            <Button\n                bordered\n                onClick={success1}>\n                顶部通栏\n            </Button>\n            <Button\n                bordered\n                onClick={success2}>\n                底部通栏\n            </Button>\n            </div>\n        )\n    }\n}\n\n\nexport default Demo2;\n","desc":" 顶部通栏消息提醒。通过 `style` 参数给 Message 组件添加样式。","scss_code":""},{"example":<Demo3 />,"title":" 不同语义的消息提醒","code":"/**\r\n *\r\n * @title 不同语义的消息提醒\r\n * @description 提供四种语义色，每种语义色有深/浅两种风格，均通过 `color` 参数设置。\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\r\n\n\r\n\r\n// 深语义色\r\nconst info = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态更新，请在审批中心查看最新状态。', color: 'info'});\r\n};\r\nconst danger = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态更新失败，请重新尝试。', color: 'danger'});\r\n};\r\nconst warning = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态异常，请重新提交。', color: 'warning'});\r\n};\r\nconst success = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据提交成功。', color: 'success'});\r\n};\r\n// 浅语义色\r\nconst infolight = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态更新，请在审批中心查看最新状态。', color: 'infolight'});\r\n};\r\nconst dangerlight = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态更新失败，请重新尝试。', color: 'dangerlight'});\r\n};\r\nconst warninglight = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态异常，请重新提交。', color: 'warninglight'});\r\n};\r\nconst successlight = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据提交成功。', color: 'successlight'});\r\n};\r\n\r\nclass Demo3 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"paddingDemo\">\r\n                <p>\r\n                    <Button bordered onClick={info}>info</Button>\r\n                    <Button bordered onClick={danger}>danger</Button>\r\n                    <Button bordered onClick={warning}>warning</Button>\r\n                    <Button bordered onClick={success}>success</Button>\r\n                </p>\r\n                <p>\r\n                    <Button bordered onClick={infolight}>infolight</Button>\r\n                    <Button bordered onClick={dangerlight}>dangerlight</Button>\r\n                    <Button bordered onClick={warninglight}>warninglight</Button>\r\n                    <Button bordered onClick={successlight}>successlight</Button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Demo3;\r\n","desc":" 提供四种语义色，每种语义色有深/浅两种风格，均通过 `color` 参数设置。","scss_code":".paddingDemo{\r\n  button{\r\n    margin: 10px;\r\n  }\r\n}"},{"example":<Demo4 />,"title":" 不同显示位置的消息提醒","code":"/**\r\n *\r\n * @title 不同显示位置的消息提醒\r\n * @description 一个页面的message只能设置一中显示位置，提供六种位置选择，查看每种示例，需每次刷新\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\r\n\n\r\n\r\n const top = function () {\r\n    Message.destroy();\r\n    Message.create({content: '审批单据提交成功，你可以在审批中心关注单据审批状态。', position: 'top', color: 'successlight'});\r\n };\r\n const bottom = function () {\r\n    Message.destroy();\r\n    Message.create({content: '审批单据提交成功，你可以在审批中心关注单据审批状态。', position: 'bottom', color: 'successlight'});\r\n };\r\n const topRight = function () {\r\n    Message.destroy();\r\n    Message.create({content: '审批单据提交成功，你可以在审批中心关注单据审批状态。', position: 'topRight', color: 'successlight'});\r\n };\r\n const topLeft = function () {\r\n    Message.destroy();\r\n    Message.create({content: '审批单据提交成功，你可以在审批中心关注单据审批状态。', position: 'topLeft', color: 'successlight'});\r\n };\r\n const bottomRight = function () {\r\n    Message.destroy();\r\n    Message.create({content: '审批单据提交成功，你可以在审批中心关注单据审批状态。', position: 'bottomRight', color: 'successlight'});\r\n };\r\n const bottomLeft = function () {\r\n    Message.destroy();\r\n    Message.create({content: '审批单据提交成功，你可以在审批中心关注单据审批状态。', position: 'bottomLeft', color: 'successlight'});\r\n };\r\nclass Demo4 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"paddingDemo\">\r\n            <Button\r\n                colors=\"secondary\"\r\n                onClick={top}>\r\n                top\r\n            </Button>\r\n            <Button\r\n                colors=\"secondary\"\r\n                onClick={bottom}>\r\n                bottom\r\n            </Button>\r\n            <Button\r\n                colors=\"secondary\"\r\n                onClick={topRight}>\r\n                topRight\r\n            </Button>\r\n            <Button\r\n                colors=\"secondary\"\r\n                onClick={topLeft}>\r\n                topLeft\r\n            </Button>\r\n            <Button\r\n                colors=\"secondary\"\r\n                onClick={bottomRight}>\r\n                bottomRight\r\n            </Button>\r\n            <Button\r\n                colors=\"secondary\"\r\n                onClick={bottomLeft}>\r\n                bottomLeft\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demo4;\r\n","desc":" 一个页面的message只能设置一中显示位置，提供六种位置选择，查看每种示例，需每次刷新","scss_code":".paddingDemo{\r\n  button{\r\n    margin: 8px;\r\n  }\r\n}"},{"example":<Demo5 />,"title":" Message.config 自定义默认设置","code":"/**\r\n *\r\n * @title Message.config 自定义默认设置\r\n * @description 通过 `config` API自定义默认设置。\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\r\n\n\r\n\r\nconst dark1 = function () {\r\n    Message.destroy();\r\n    Message.config({\r\n        top: 200,\r\n        duration: 3,\r\n    });\r\n    Message.create({content: '新单据状态更新，请在审批中心查看最新状态。', color: \"dark\"});\r\n};\r\nconst dark2 = function () {\r\n    Message.destroy();\r\n    Message.config({\r\n        width: 500\r\n    });\r\n    Message.create({content: '单据提交成功。', color: \"dark\", position: 'bottomLeft'});\r\n};\r\n\r\nclass Demo5 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"paddingDemo\">\r\n            <Button\r\n                colors=\"dark\"\r\n                onClick={dark1}>\r\n                自定义 top\r\n            </Button>\r\n            <Button\r\n                shape=\"border\"\r\n                onClick={dark2}>\r\n                自定义 width\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Demo5;\r\n","desc":" 通过 `config` API自定义默认设置。"},{"example":<Demo6 />,"title":" 可控制的消息提醒","code":"/**\r\n *\r\n * @title 可控制的消息提醒\r\n * @description 通过设置 `duration:3` 来设置显示时间，`duration:null`为手动关闭。\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\r\n\n\r\n\r\nconst automatic = function () {\r\n    Message.destroy();\r\n    Message.create({\r\n        content: '新单据状态更新，请在审批中心查看最新状态。', \r\n        color: \"dark\", \r\n        duration:3\r\n    });\r\n};\r\nconst manual = function () {\r\n    Message.destroy();\r\n    Message.create({\r\n        content: '新单据状态更新，请在审批中心查看最新状态。', \r\n        color: \"dark\", \r\n        duration:null\r\n    });\r\n};\r\n\r\nclass Demo6 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"paddingDemo\">\r\n            <Button\r\n                colors=\"dark\"\r\n                onClick={automatic}>\r\n                自动关闭\r\n            </Button>\r\n            <Button\r\n                shape=\"border\"\r\n                onClick={manual}>\r\n                手动关闭\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Demo6;\r\n","desc":" 通过设置 `duration:3` 来设置显示时间，`duration:null`为手动关闭。"},{"example":<Demo7 />,"title":" 单据提示类场景示例","code":"/**\r\n *\r\n * @title 单据提示类场景示例\r\n * @description Message组件常用在网络请求成功、失败、出现警告时使用。对于删除操作等需要强提示的场景可使用Modal组件。\r\n *\r\n */\r\n\r\nimport React, { Component } from 'react';\nimport { FormControl, Form, Icon, Label, Table, Modal, Button, Message } from 'tinper-bee';\r\n\n\n\n\n\n\n\n\r\n\r\nconst FormItem = Form.FormItem;\r\n\r\nconst success = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据提交成功。', color: 'successlight'});\r\n};\r\nconst error = function () {\r\n    Message.destroy();\r\n    Message.create({content: '单据状态更新失败，请重新尝试。', color: 'dangerlight'});\r\n};\r\n\r\nconst columns = [\r\n    { title: \"员工编号\", dataIndex: \"a\", key: \"a\", width: 150 },\r\n    { title: \"员工姓名\", dataIndex: \"b\", key: \"b\", width:100},\r\n    { title: \"性别\", dataIndex: \"c\", key: \"c\", width: 100},\r\n    { title: \"部门\", dataIndex: \"d\", key: \"d\", width: 100 }\r\n];\r\n\r\nconst data = [\r\n    { a: \"ASVAL_20190328\", b: \"小张\", c: \"男\", d: \"财务二科\", key: \"1\" },\r\n    { a: \"ASVAL_20190320\", b: \"小明\", c: \"男\", d: \"财务一科\", key: \"2\" },\r\n    { a: \"ASVAL_20190312\", b: \"小红\", c: \"女\", d: \"财务一科\", key: \"3\" }\r\n];\r\n\r\nclass Demo7 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: data,\r\n            showEditModal: false\r\n        }\r\n        this.currentRecord = {}\r\n    }\r\n    confirm = (index) => {\r\n        let self = this;\r\n        Modal.confirm({\r\n            title: '确定要删除这条单据吗？',\r\n            content: '单据删除后将不能恢复。',\r\n            onOk: () => {\r\n                data.splice(index,1);\r\n                self.setState({data});\r\n            }\r\n        })\r\n    };\r\n    \r\n    handleRowHover=(index,record)=>{\r\n        this.currentIndex = index;\r\n        this.currentRecord = record;\r\n    }\r\n    // 删除表格行\r\n    handleDelete = () => {\r\n        this.confirm(this.currentIndex);\r\n    }\r\n    // 新增表格行\r\n    handleAdd = () => {\r\n        let length = data.length;\r\n        data.push({ a: `ASVAL_201903${length}`, b: \"\", c: \"\", d: \"\", e: \"\", key: length });\r\n        this.setState({data});\r\n    }\r\n    // 编辑表格行\r\n    handleEdit = () => {\r\n        this.setState({\r\n            showEditModal: true\r\n        })\r\n    }\r\n    // 关闭模态框\r\n    close = () => {\r\n        this.setState({\r\n            showEditModal: false\r\n        })\r\n    }\r\n    // 提交修改\r\n    submit = (e) => {\r\n        let self = this,\r\n            flag = false;\r\n        e.preventDefault();\r\n        let { a='' } = this.currentRecord;\r\n        this.props.form.validateFields((err, values) => {\r\n            if (err) {\r\n                console.log('校验失败', values);\r\n                error();\r\n            } else {\r\n                console.log('提交成功', values);\r\n                flag = true;\r\n                let newRecord = {\r\n                    a: a,\r\n                    b: values.b,\r\n                    c: values.c,\r\n                    d: values.d\r\n                };\r\n                data.splice(this.currentIndex,1,newRecord);\r\n                self.setState({data});\r\n            }\r\n        });\r\n        if(flag){\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    renderRowHover=()=>{\r\n        return <div className=\"opt-btns\">\r\n                <Button size=\"sm\" onClick={this.handleEdit}>编辑</Button> \r\n                <Button size=\"sm\" onClick={this.handleDelete}>删除</Button>\r\n               </div>\r\n    }\r\n    render () {\r\n        const { getFieldProps, getFieldError } = this.props.form;\r\n        let { a='',b='',c='',d='' } = this.currentRecord;\r\n        return (\r\n            <div className=\"demo6\">\r\n                <Button colors=\"primary\" size=\"sm\" onClick={this.handleAdd}>新增</Button>\r\n                <Button colors=\"primary\" size=\"sm\" onClick={success}>保存</Button>\r\n                <Table\r\n                data={data}\r\n                columns={columns}\r\n                onRowHover={this.handleRowHover}\r\n                hoverContent={this.renderRowHover}\r\n                />\r\n                <Modal\r\n                className=\"demo3-modal\"\r\n                width = {460}\r\n                backdropClosable = {false}\r\n                show = { this.state.showEditModal }\r\n                onHide = { this.close } >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>编辑行</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form>\r\n                            <FormItem>\r\n                                <Label>员工编号</Label>\r\n                                <FormControl value={a} disabled/>\r\n                            </FormItem>\r\n                            <FormItem>\r\n                                <Label><Icon type=\"uf-mi\" className='mast'></Icon>员工姓名</Label>\r\n                                <FormControl placeholder=\"请输入员工姓名\" \r\n                                    {...getFieldProps('b', {\r\n                                        initialValue: b,\r\n                                        validateTrigger: 'onBlur',\r\n                                        rules: [{\r\n                                            required: true, message: <span><Icon type=\"uf-exc-t\"></Icon><span>请输入员工姓名</span></span>,\r\n                                        }],\r\n                                    }) }\r\n                                />\r\n                                <span className='error'>\r\n                                    {getFieldError('b')}\r\n                                </span>\r\n                            </FormItem>\r\n                            <FormItem>\r\n                                <Label><Icon type=\"uf-mi\" className='mast'></Icon>性别</Label>\r\n                                <FormControl placeholder=\"请选择性别\" value={c}\r\n                                    {...getFieldProps('c', {\r\n                                        initialValue: c,\r\n                                        validateTrigger: 'onBlur',\r\n                                        rules: [{\r\n                                            required: true, message: <span><Icon type=\"uf-exc-t\"></Icon><span>请选择性别</span></span>,\r\n                                        }],\r\n                                    }) }\r\n                                />\r\n                                <span className='error'>\r\n                                    {getFieldError('c')}\r\n                                </span>\r\n                            </FormItem>\r\n                            <FormItem>\r\n                                <Label><Icon type=\"uf-mi\" className='mast'></Icon>部门</Label>\r\n                                <FormControl placeholder=\"请输入部门\" value={d}\r\n                                    {...getFieldProps('d', {\r\n                                        initialValue: d,\r\n                                        validateTrigger: 'onBlur',\r\n                                        rules: [{\r\n                                            required: true, message: <span><Icon type=\"uf-exc-t\"></Icon><span>请输入部门</span></span>,\r\n                                        }],\r\n                                    }) }\r\n                                />\r\n                                <span className='error'>\r\n                                    {getFieldError('d')}\r\n                                </span>\r\n                            </FormItem>\r\n                        </Form>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button onClick={ this.close } bordered style={{marginRight:\"8px\"}}>取消</Button>\r\n                        <Button onClick={ this.submit } colors=\"primary\">确认</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.createForm()(Demo7);\r\n","desc":" Message组件常用在网络请求成功、失败、出现警告时使用。对于删除操作等需要强提示的场景可使用Modal组件。","scss_code":".demo6{\r\n    .u-button{\r\n      margin: 8px 8px 8px 0;   \r\n    }\r\n    .u-table .u-button{\r\n        margin: 0 4px;\r\n        color: #fff;\r\n        background: #505F79;\r\n        border-color: #505F79;\r\n        &:hover, &:active{\r\n          background: #344563;\r\n          border-color: #505F79;\r\n        }\r\n    }\r\n}"},{"example":<Demo8 />,"title":" 自定义icon图标","code":"/**\n *\n * @title 自定义icon图标\n * @description 通过 `icon` 参数更改图标的展示，使用方法和组件Icon的方法保持一致。\n *\n */\n\nimport React, { Component } from 'react';\nimport { Button, Message } from 'tinper-bee';\n\n\nconst light = function () {\n    Message.destroy();\n    Message.create({content: '自定义图标展示。', color: \"light\", icon: 'uf uf-tinperzc-col'});\n};\n\nclass Demo8 extends Component {\n    constructor(props){\n        super(props);\n    }\n    render () {\n        return (\n            <div className=\"paddingDemo\">\n                <Button\n                    shape=\"border\"\n                    onClick={light}>\n                    自定义图标\n                </Button>\n            </div>\n        )\n    }\n}\n\n\nexport default Demo8;\n","desc":" 通过 `icon` 参数更改图标的展示，使用方法和组件Icon的方法保持一致。"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={12} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('tinperBeeDemo'));
