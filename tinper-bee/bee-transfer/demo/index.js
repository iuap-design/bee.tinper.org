import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Con, Row, Col } from 'bee-layout';
import { Panel } from 'bee-panel';
import Drawer from 'bee-drawer';
import Clipboard from 'bee-clipboard'; 
import Button from '../src';



var Demo1 = require("./demolist/Demo1");var Demo2 = require("./demolist/Demo2");var Demo3 = require("./demolist/Demo3");var Demo4 = require("./demolist/Demo4");var Demo5 = require("./demolist/Demo5");var Demo6 = require("./demolist/Demo6");var Demo7 = require("./demolist/Demo7");var Demo8 = require("./demolist/Demo8");var DemoArray = [{"example":<Demo1 />,"title":" 常用可选transfer","code":"/**\r\n*\r\n* @title 常用可选transfer\r\n* @description targetKeys需要通过ES6的扩展运算符进行赋值，实现对象的深拷贝\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Transfer } from 'tinper-bee';\r\n\n\r\n\r\nconst AllTargetKeys = [];\r\nconst mockData = [];\r\nfor (let i = 0; i < 20; i++) {\r\n  mockData.push({\r\n    key: i.toString(),\r\n    title: `content${i + 1}`,\r\n    description: `description of content${i + 1}`,\r\n    disabled: i % 3 < 1,\r\n\r\n  });\r\n  AllTargetKeys.push(i.toString());\r\n}\r\n\r\nconst targetKeys = mockData\r\n        .filter(item => +item.key % 3 > 1)\r\n        .map(item => item.key);\r\n\r\nclass Demo1 extends React.Component {\r\n  state = {\r\n    targetKeys,\r\n    selectedKeys: [],\r\n    showModal: false,\r\n    modalSize: ''\r\n  }\r\n\r\n  handleChange = (nextTargetKeys, direction, moveKeys) => {\r\n    this.setState({ targetKeys: nextTargetKeys });\r\n\r\n    console.log('targetKeys: ', nextTargetKeys);\r\n    console.log('direction: ', direction);\r\n    console.log('moveKeys: ', moveKeys);\r\n  }\r\n\r\n  handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\r\n\r\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\r\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\r\n  }\r\n\r\n  handleScroll = (direction, e) => {\r\n    console.log('direction:', direction);\r\n    console.log('target:', e.target);\r\n  }\r\n\r\n  moveAllToRight = () => {\r\n    this.setState({\r\n      targetKeys: AllTargetKeys\r\n    })\r\n  }\r\n  moveAllToLeft = () => {\r\n    this.setState({\r\n      targetKeys: []\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    const targetKeys = [...this.state.targetKeys];\r\n    return (\r\n      <div>\r\n        <Button onClick={this.moveAllToRight} style={{margin:'8px'}}>全部移到右边</Button>\r\n        <Button onClick={this.moveAllToLeft} style={{margin:'8px'}}>全部移到左边</Button>\r\n        <Transfer\r\n          dataSource={mockData}\r\n          titles={['Source', 'Target']}\r\n          targetKeys={targetKeys}\r\n          selectedKeys={state.selectedKeys}\r\n          onChange={this.handleChange}\r\n          onSelectChange={this.handleSelectChange}\r\n          onScroll={this.handleScroll}\r\n          render={item => item.title}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Demo1\r\n","desc":" targetKeys需要通过ES6的扩展运算符进行赋值，实现对象的深拷贝"},{"example":<Demo2 />,"title":" 带搜索框的tranfer","code":"/**\r\n*\r\n* @title 带搜索框的tranfer\r\n* @description\r\n*\r\n*/\r\n\r\nimport React, { Component } from 'react';\nimport { Transfer } from 'tinper-bee';\r\n\r\n\r\n\r\nclass Demo2 extends React.Component {\r\n  state = {\r\n    mockData: [],\r\n    targetKeys: [],\r\n  }\r\n  componentDidMount() {\r\n    this.getMock();\r\n  }\r\n  getMock = () => {\r\n    const targetKeys = [];\r\n    const mockData = [];\r\n    for (let i = 0; i < 20; i++) {\r\n      const data = {\r\n        key: i.toString(),\r\n        title: `content${i + 1}`,\r\n        description: `description of content${i + 1}`,\r\n        chosen: Math.random() * 2 > 1,\r\n      };\r\n      if (data.chosen) {\r\n        targetKeys.push(data.key);\r\n      }\r\n      mockData.push(data);\r\n    }\r\n    this.setState({ mockData, targetKeys });\r\n  }\r\n  filterOption = (inputValue, option) => {\r\n    return option.title.indexOf(inputValue) > -1;\r\n  }\r\n  handleChange = (targetKeys) => {\r\n    this.setState({ targetKeys });\r\n  }\r\n  render() {\r\n    return (\r\n      <Transfer\r\n        dataSource={this.state.mockData}\r\n        showSearch\r\n        filterOption={this.filterOption}\r\n        targetKeys={this.state.targetKeys}\r\n        onChange={this.handleChange}\r\n        render={item => item.title}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Demo2\r\n","desc":""},{"example":<Demo3 />,"title":" 底部自定义的transfer","code":"/**\r\n*\r\n* @title 底部自定义的transfer\r\n* @description \r\n*\r\n*/\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Transfer } from 'tinper-bee';\r\n\n\r\n\r\nclass Demo3 extends React.Component {\r\n  state = {\r\n    mockData: [],\r\n    targetKeys: [],\r\n  }\r\n  componentDidMount() {\r\n    this.getMock();\r\n  }\r\n  getMock = () => {\r\n    const targetKeys = [];\r\n    const mockData = [];\r\n    for (let i = 0; i < 20; i++) {\r\n      const data = {\r\n        key: i.toString(),\r\n        title: `content${i + 1}`,\r\n        description: `description of content${i + 1}`,\r\n        chosen: Math.random() * 2 > 1,\r\n      };\r\n      if (data.chosen) {\r\n        targetKeys.push(data.key);\r\n      }\r\n      mockData.push(data);\r\n    }\r\n    this.setState({ mockData, targetKeys });\r\n  }\r\n  handleChange = (targetKeys) => {\r\n    this.setState({ targetKeys });\r\n  }\r\n  renderFooter = () => {\r\n    return (\r\n      <Button\r\n        size=\"sm\"\r\n        style={{ float: 'right', margin: 5 }}\r\n        onClick={this.getMock}\r\n      >\r\n        reload\r\n      </Button>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <Transfer\r\n        dataSource={this.state.mockData}\r\n        showSearch\r\n        listStyle={{\r\n          width: 250,\r\n          height: 300,\r\n        }}\r\n        targetKeys={this.state.targetKeys}\r\n        onChange={this.handleChange}\r\n        render={item => `${item.title}-${item.description}`}\r\n        footer={this.renderFooter}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo3\r\n","desc":" "},{"example":<Demo4 />,"title":" 隐藏复选框","code":"/**\r\n*\r\n* @title 隐藏复选框\r\n* @description 通过`showCheckbox`参数控制复选框显示和隐藏\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\nimport { Transfer } from 'tinper-bee';\r\n\r\n\r\nconst mockData = [];\r\nfor (let i = 0; i < 20; i++) {\r\n  mockData.push({\r\n    key: i.toString(),\r\n    title: `content${i + 1}`,\r\n    description: `description of content${i + 1}`,\r\n    disabled: i % 3 < 1,\r\n\r\n  });\r\n}\r\n\r\nconst targetKeys = mockData\r\n        .filter(item => +item.key % 3 > 1)\r\n        .map(item => item.key);\r\n\r\nclass Demo4 extends React.Component {\r\n  state = {\r\n    targetKeys,\r\n    selectedKeys: [],\r\n    showModal: false,\r\n    modalSize: ''\r\n  }\r\n\r\n  handleChange = (nextTargetKeys, direction, moveKeys) => {\r\n    this.setState({ targetKeys: nextTargetKeys });\r\n\r\n    console.log('targetKeys: ', targetKeys);\r\n    console.log('direction: ', direction);\r\n    console.log('moveKeys: ', moveKeys);\r\n  }\r\n\r\n  handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\r\n\r\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\r\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\r\n  }\r\n\r\n  handleScroll = (direction, e) => {\r\n    console.log('direction:', direction);\r\n    console.log('target:', e.target);\r\n  }\r\n\r\n\r\n  render() {\r\n    const state = this.state;\r\n\r\n    return (\r\n       <Transfer\r\n          dataSource={mockData}\r\n          showCheckbox={false}\r\n          titles={['Source', 'Target']}\r\n          targetKeys={state.targetKeys}\r\n          selectedKeys={state.selectedKeys}\r\n          onChange={this.handleChange}\r\n          onSelectChange={this.handleSelectChange}\r\n          onScroll={this.handleScroll}\r\n          render={item => item.title}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Demo4;\r\n","desc":" 通过`showCheckbox`参数控制复选框显示和隐藏"},{"example":<Demo5 />,"title":" 拖拽穿梭","code":"/**\n*\n* @title 拖拽穿梭\n* @description 通过`draggable`参数设置是否可以通过拖拽进行穿梭和排序\n*\n*/\n\n\nimport React, { Component } from 'react';\nimport { Transfer } from 'tinper-bee';\n\n\nconst mockData = [];\nfor (let i = 0; i < 20; i++) {\n  mockData.push({\n    key: i.toString(),\n    title: `content${i + 1}`,\n    description: `description of content${i + 1}`,\n    disabled: i % 3 < 1,\n\n  });\n}\n\nconst targetKeys = mockData\n        .filter(item => +item.key % 3 > 1)\n        .map(item => item.key);\n\nclass Demo5 extends React.Component {\n  state = {\n    targetKeys,\n    selectedKeys: [],\n    showModal: false,\n    modalSize: ''\n  }\n\n  handleChange = (nextTargetKeys, direction, moveKeys) => {\n    this.setState({ targetKeys: nextTargetKeys });\n\n    console.log('targetKeys: ', nextTargetKeys);\n    console.log('direction: ', direction);\n    console.log('moveKeys: ', moveKeys);\n  }\n\n  handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\n\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\n  }\n\n  handleScroll = (direction, e) => {\n    console.log('direction:', direction);\n    console.log('target:', e.target);\n  }\n\n\n  render() {\n    const state = this.state;\n    // targetKeys需要通过数组的扩展运算符进行赋值\n    const targetKeys = [...this.state.targetKeys];\n    return (\n       <Transfer\n          draggable={true}\n          dataSource={mockData}\n          titles={['Source', 'Target']}\n          targetKeys={targetKeys}\n          selectedKeys={state.selectedKeys}\n          onChange={this.handleChange}\n          onSelectChange={this.handleSelectChange}\n          onScroll={this.handleScroll}\n          render={item => item.title}\n        />\n    );\n  }\n}\n\n\nexport default Demo5\n","desc":" 通过`draggable`参数设置是否可以通过拖拽进行穿梭和排序"},{"example":<Demo6 />,"title":" 自定义渲染行数据","code":"/**\r\n*\r\n* @title 自定义渲染行数据\r\n* @description 自定义渲染每一个 Transfer Item，可用于渲染复杂数据。\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\nimport { Button, Transfer } from 'tinper-bee';\r\n\n\r\n\r\nconst AllTargetKeys = [];\r\nconst mockData = [];\r\nfor (let i = 0; i < 20; i++) {\r\n  mockData.push({\r\n    key: i.toString(),\r\n    title: `content${i + 1}`,\r\n    description: `description of content${i + 1}`,\r\n    disabled: i % 3 < 1,\r\n\r\n  });\r\n  AllTargetKeys.push(i.toString());\r\n}\r\n\r\nconst targetKeys = mockData\r\n        .filter(item => +item.key % 3 > 1)\r\n        .map(item => item.key);\r\n\r\nclass Demo6 extends React.Component {\r\n  state = {\r\n    targetKeys,\r\n    selectedKeys: [],\r\n    showModal: false,\r\n    modalSize: ''\r\n  }\r\n\r\n  handleChange = (nextTargetKeys, direction, moveKeys) => {\r\n    this.setState({ targetKeys: nextTargetKeys });\r\n\r\n    console.log('targetKeys: ', nextTargetKeys);\r\n    console.log('direction: ', direction);\r\n    console.log('moveKeys: ', moveKeys);\r\n  }\r\n  \r\n  handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\r\n\r\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\r\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\r\n  }\r\n\r\n  /**\r\n   * 自定义渲染行数据\r\n   */\r\n  renderItem = (item) => {\r\n    const customLabel = (\r\n      <span className=\"custom-item\">\r\n        {item.title}\r\n      </span>\r\n    );\r\n\r\n    return {\r\n      label: customLabel, // 显示的ReactElement节点\r\n      value: item.title, // 作为title显示\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    const targetKeys = [...this.state.targetKeys];\r\n    return (\r\n      <div>\r\n        <Transfer\r\n          dataSource={mockData}\r\n          titles={['Source', 'Target']}\r\n          targetKeys={targetKeys}\r\n          selectedKeys={state.selectedKeys}\r\n          onChange={this.handleChange}\r\n          onSelectChange={this.handleSelectChange}\r\n          render={this.renderItem}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Demo6\r\n","desc":" 自定义渲染每一个 Transfer Item，可用于渲染复杂数据。"},{"example":<Demo7 />,"title":" 自定义右侧已选列表的排列顺序","code":"/**\r\n*\r\n* @title 自定义右侧已选列表的排列顺序\r\n* @description `appendToBottom` 参数控制是否将已选项追加到右侧列表末尾，其默认值为false（即将已选项添加到右侧列表最上方）。可在项目中动态改变参数数组targetKeys，穿梭框会根据targetKeys中的顺序进行排序。应用场景：通过上移/下移改变右侧数据顺序。\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\nimport { Icon, Button, Transfer } from 'tinper-bee';\r\n\n\n\r\n\r\nconst AllTargetKeys = [];\r\nconst mockData = [];\r\nfor (let i = 0; i < 20; i++) {\r\n  mockData.push({\r\n    key: i.toString(),\r\n    title: `content${i + 1}`,\r\n    description: `description of content${i + 1}`,\r\n  });\r\n  AllTargetKeys.push(i.toString());\r\n}\r\n\r\nconst targetKeys = mockData\r\n        .filter(item => +item.key % 7 === 0)\r\n        .map(item => item.key);\r\n\r\nclass Demo7 extends React.Component {\r\n    state = {\r\n        targetKeys,\r\n        selectedKeys: [],\r\n        showModal: false,\r\n        modalSize: ''\r\n    }\r\n\r\n    handleChange = (nextTargetKeys, direction, moveKeys) => {\r\n        this.setState({ targetKeys: nextTargetKeys });\r\n\r\n        console.log('targetKeys: ', nextTargetKeys);\r\n        console.log('direction: ', direction);\r\n        console.log('moveKeys: ', moveKeys);\r\n    }\r\n\r\n    handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n        this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\r\n\r\n        console.log('sourceSelectedKeys: ', sourceSelectedKeys);\r\n        console.log('targetSelectedKeys: ', targetSelectedKeys);\r\n    }\r\n\r\n    moveAllToRight = () => {\r\n        this.setState({\r\n        targetKeys: AllTargetKeys\r\n        })\r\n    }\r\n    moveAllToLeft = () => {\r\n        this.setState({\r\n        targetKeys: []\r\n        })\r\n    }\r\n\r\n    swapItems(arr, index1, index2) {\r\n\t\tarr[index1] = arr.splice(index2, 1, arr[index1])[0];\r\n\t\treturn arr;\r\n\t};\r\n\r\n    scopeupRecord(arr, $index) {\r\n\t\tif ($index == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.swapItems(arr, $index, $index - 1);\r\n\t};\r\n    \r\n    scopedownRecord(arr, $index) {\r\n\t\tif ($index == arr.length - 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.swapItems(arr, $index, $index + 1);\r\n\t};\r\n\r\n    moveUp = () => {\r\n        let { targetKeys, selectedKeys } = this.state\r\n\t\tlet selectedTargetKeys = []\r\n\t\ttargetKeys.forEach((v, i) => {\r\n\t\t\tselectedKeys.forEach((v2, i2) => {\r\n\t\t\t\tif (v2 == v) {\r\n\t\t\t\t\tselectedTargetKeys.push({ key: v, index: i })\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\tif (selectedTargetKeys.length == 1) {\r\n\t\t\tthis.scopeupRecord(targetKeys, selectedTargetKeys[0].index)\r\n\t\t\tthis.setState({\r\n\t\t\t\ttargetKeys\r\n\t\t\t});\r\n\t\t}\r\n    }\r\n\r\n    moveDown = () => {\r\n        let { targetKeys, selectedKeys } = this.state\r\n\t\tlet selectedTargetKeys = []\r\n\t\ttargetKeys.forEach((v, i) => {\r\n\t\t\tselectedKeys.forEach((v2, i2) => {\r\n\t\t\t\tif (v2 == v) {\r\n\t\t\t\t\tselectedTargetKeys.push({ key: v, index: i })\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\tconsole.log(targetKeys, selectedKeys, selectedTargetKeys)\r\n\t\tif (selectedTargetKeys.length == 1) {\r\n\t\t\tthis.scopedownRecord(targetKeys, selectedTargetKeys[0].index)\r\n\t\t\tthis.setState({\r\n\t\t\t\ttargetKeys\r\n\t\t\t});\r\n\t\t}\r\n    }\r\n\r\n    render() {\r\n        const state = this.state;\r\n        const targetKeys = [...this.state.targetKeys];\r\n        return (\r\n        <div className=\"demo7\">\r\n            <Button onClick={this.moveUp} size=\"sm\" className=\"moveUpBtn moveBtn\"><Icon type=\"uf-arrow-up\" /></Button>\r\n            <Button onClick={this.moveDown} size=\"sm\" className=\"moveDownBtn moveBtn\"><Icon type=\"uf-arrow-down\" /></Button>\r\n            <Transfer\r\n            appendToBottom={true}\r\n            dataSource={mockData}\r\n            titles={['Source', 'Target']}\r\n            targetKeys={targetKeys}\r\n            selectedKeys={state.selectedKeys}\r\n            onChange={this.handleChange}\r\n            onSelectChange={this.handleSelectChange}\r\n            render={item => item.title}\r\n            />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Demo7\r\n","desc":" `appendToBottom` 参数控制是否将已选项追加到右侧列表末尾，其默认值为false（即将已选项添加到右侧列表最上方）。可在项目中动态改变参数数组targetKeys，穿梭框会根据targetKeys中的顺序进行排序。应用场景：通过上移/下移改变右侧数据顺序。","scss_code":".demo7{\r\n    width: 476px;\r\n    position: relative;\r\n    .moveBtn{\r\n        position: absolute;\r\n        right: 0;\r\n        margin: 8px;\r\n        min-width: 40px;\r\n        z-index: 10;\r\n        color: #86939E;\r\n        cursor: pointer;\r\n        &.moveUpBtn{\r\n            margin-top: 69px;\r\n        }\r\n        &.moveDownBtn{\r\n            margin-top: 100px;\r\n        }\r\n    }\r\n}"},{"example":<Demo8 />,"title":" 树穿梭","code":"/**\r\n*\r\n* @title 树穿梭\r\n* @description 结合 Tree 和 Transfer 的使用示例，解决多级数据穿梭问题。\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\nimport { Tree, Transfer } from 'tinper-bee';\r\n\n\r\n\r\nconst TreeNode = Tree.TreeNode;\r\nconst valueField = \"refcode\";\r\nconst AllTargetKeys = [];\r\n\r\nconst treeData = [{\"children\":[{\"children\":[],\"pid\":\"lkp\",\"refpk\":\"857c41b7-e1a3-11e5-aa70-0242ac11001d\",\"refcode\":\"wujd\",\"id\":\"wujd\",\"isLeaf\":\"true\",\"refname\":\"开发部\"},{\"children\":[],\"pid\":\"lkp\",\"refpk\":\"780aca16-e1a3-11e5-aa70-0242ac11001d\",\"refcode\":\"fzl\",\"id\":\"fzl\",\"isLeaf\":\"true\",\"refname\":\"人事部\"}],\"pid\":\"\",\"refpk\":\"708918f5-e1a3-11e5-aa70-0242ac11001d\",\"refcode\":\"lkp\",\"id\":\"lkp\",\"refname\":\"总公司\"}];\r\n\r\nclass Demo8 extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            targetKeys: [],\r\n            selectedKeys: [],\r\n            expandedKeys: [],//记录展开节点\r\n            searchValue: '',//记录搜索内容\r\n            autoExpandParent: true,\r\n            dataList: [],\r\n            transferData : [{\"rownum_\":1,\"login_name\":\"43\",\"name\":\"花43\",\"refcode\":\"43\",\"refpk\":\"718dda50629e4f8a8833b5d17de85280\",\"id\":\"718dda50629e4f8a8833b5d17de85280\",\"refname\":\"花43\",\"key\":\"43\",\"title\":\"花43-43\"},{\"rownum_\":2,\"login_name\":\"46\",\"name\":\"花46\",\"refcode\":\"46\",\"refpk\":\"b595b95cf45348d7aadb7ae349a89a76\",\"id\":\"b595b95cf45348d7aadb7ae349a89a76\",\"refname\":\"花46\",\"key\":\"46\",\"title\":\"花46-46\"},{\"rownum_\":3,\"login_name\":\"48\",\"name\":\"花48\",\"refcode\":\"48\",\"refpk\":\"62310dd3677440ef96042b9c3ad135e2\",\"id\":\"62310dd3677440ef96042b9c3ad135e2\",\"refname\":\"花48\",\"key\":\"48\",\"title\":\"花48-48\"},{\"rownum_\":4,\"login_name\":\"53\",\"name\":\"花53\",\"refcode\":\"53\",\"refpk\":\"d64f7d6e6d014d40841415cd35a43dcf\",\"id\":\"d64f7d6e6d014d40841415cd35a43dcf\",\"refname\":\"花53\",\"key\":\"53\",\"title\":\"花53-53\"},{\"rownum_\":5,\"login_name\":\"70\",\"name\":\"花70\",\"refcode\":\"70\",\"refpk\":\"2ff33db8d1e94bcbaf9ba45e1ad6ea9c\",\"id\":\"2ff33db8d1e94bcbaf9ba45e1ad6ea9c\",\"refname\":\"花70\",\"key\":\"70\",\"title\":\"花70-70\"},{\"rownum_\":6,\"login_name\":\"73\",\"name\":\"花73\",\"refcode\":\"73\",\"refpk\":\"6d8328debfc94d5b8446f58d2b0b3cdc\",\"id\":\"6d8328debfc94d5b8446f58d2b0b3cdc\",\"refname\":\"花73\",\"key\":\"73\",\"title\":\"花73-73\"},{\"rownum_\":7,\"login_name\":\"76\",\"name\":\"花76\",\"refcode\":\"76\",\"refpk\":\"7768b51dc14544669f2cffa840edb049\",\"id\":\"7768b51dc14544669f2cffa840edb049\",\"refname\":\"花76\",\"key\":\"76\",\"title\":\"花76-76\"},{\"rownum_\":8,\"login_name\":\"80\",\"name\":\"花80\",\"refcode\":\"80\",\"refpk\":\"a89cc45ed1ec49f19bb608c18c958359\",\"id\":\"a89cc45ed1ec49f19bb608c18c958359\",\"refname\":\"花80\",\"key\":\"80\",\"title\":\"花80-80\"},{\"rownum_\":9,\"login_name\":\"78\",\"name\":\"花78\",\"refcode\":\"78\",\"refpk\":\"438d0cce9ae442e586940a582c7ee054\",\"id\":\"438d0cce9ae442e586940a582c7ee054\",\"refname\":\"花78\",\"key\":\"78\",\"title\":\"花78-78\"},{\"rownum_\":10,\"login_name\":\"79\",\"name\":\"花79\",\"refcode\":\"79\",\"refpk\":\"60adbcb7d4cb49449bc7879dd4fbf1f5\",\"id\":\"60adbcb7d4cb49449bc7879dd4fbf1f5\",\"refname\":\"花79\",\"key\":\"79\",\"title\":\"花79-79\"},{\"login_name\":\"zhao\",\"refpk\":\"14e0220f-1a86-4861-8f74-f7134cb3235b\",\"id\":\"14e0220f-1a86-4861-8f74-f7134cb3235b\",\"refcode\":\"zhao\",\"name\":\"赵宇\",\"refname\":\"赵宇\",\"key\":\"zhao\",\"title\":\"赵宇-zhao\"},{\"login_name\":\"chen\",\"refpk\":\"14e0220f-1a86-4861-8f74-f71343333b5b\",\"id\":\"14e0220f-1a86-4861-8f74-f71343333b5b\",\"refcode\":\"chen\",\"name\":\"陈辉\",\"refname\":\"陈辉\",\"key\":\"chen\",\"title\":\"陈辉-chen\"},{\"login_name\":\"yue\",\"refpk\":\"14e0220f-1a86-4861-8f74-545454547489\",\"id\":\"14e0220f-1a86-4861-8f74-545454547489\",\"refcode\":\"yue\",\"name\":\"岳明\",\"refname\":\"岳明\",\"key\":\"yue\",\"title\":\"岳明-yue\"},{\"login_name\":\"xiao\",\"refpk\":\"14e0220f-1a86-4861-8f74-543434537379\",\"id\":\"14e0220f-1a86-4861-8f74-543434537379\",\"refcode\":\"xiao\",\"name\":\"小羽\",\"refname\":\"小羽\",\"key\":\"xiao\",\"title\":\"小羽-xiao\"},{\"login_name\":\"123\",\"refpk\":\"14e0220f-1a86-4861-8f74-334455643336\",\"id\":\"14e0220f-1a86-4861-8f74-334455643336\",\"refcode\":\"123\",\"name\":\"123\",\"refname\":\"123\",\"key\":\"123\",\"title\":\"123-123\"},{\"login_name\":\"huang\",\"refpk\":\"14e0220f-1a86-4861-8f74-333387127390\",\"id\":\"14e0220f-1a86-4861-8f74-333387127390\",\"refcode\":\"huang\",\"name\":\"黄东东\",\"refname\":\"黄东东\",\"key\":\"huang\",\"title\":\"黄东东-huang\"},{\"login_name\":\"liu\",\"refpk\":\"14e0220f-1a86-4861-8f74-3332332kjffo\",\"id\":\"14e0220f-1a86-4861-8f74-3332332kjffo\",\"refcode\":\"liu\",\"name\":\"刘志鹏\",\"refname\":\"刘志鹏\",\"key\":\"liu\",\"title\":\"刘志鹏-liu\"},{\"login_name\":\"liukunlin\",\"refpk\":\"14e0220f-1a86-4861-8f74-23323e321263\",\"id\":\"14e0220f-1a86-4861-8f74-23323e321263\",\"refcode\":\"liukunlin\",\"name\":\"刘坤琳\",\"refname\":\"刘坤琳\",\"key\":\"liukunlin\",\"title\":\"刘坤琳-liukunlin\"}]\r\n        }\r\n        this.transferData = [{\"rownum_\":1,\"login_name\":\"43\",\"name\":\"花43\",\"refcode\":\"43\",\"refpk\":\"718dda50629e4f8a8833b5d17de85280\",\"id\":\"718dda50629e4f8a8833b5d17de85280\",\"refname\":\"花43\",\"key\":\"43\",\"title\":\"花43-43\"},{\"rownum_\":2,\"login_name\":\"46\",\"name\":\"花46\",\"refcode\":\"46\",\"refpk\":\"b595b95cf45348d7aadb7ae349a89a76\",\"id\":\"b595b95cf45348d7aadb7ae349a89a76\",\"refname\":\"花46\",\"key\":\"46\",\"title\":\"花46-46\"},{\"rownum_\":3,\"login_name\":\"48\",\"name\":\"花48\",\"refcode\":\"48\",\"refpk\":\"62310dd3677440ef96042b9c3ad135e2\",\"id\":\"62310dd3677440ef96042b9c3ad135e2\",\"refname\":\"花48\",\"key\":\"48\",\"title\":\"花48-48\"},{\"rownum_\":4,\"login_name\":\"53\",\"name\":\"花53\",\"refcode\":\"53\",\"refpk\":\"d64f7d6e6d014d40841415cd35a43dcf\",\"id\":\"d64f7d6e6d014d40841415cd35a43dcf\",\"refname\":\"花53\",\"key\":\"53\",\"title\":\"花53-53\"},{\"rownum_\":5,\"login_name\":\"70\",\"name\":\"花70\",\"refcode\":\"70\",\"refpk\":\"2ff33db8d1e94bcbaf9ba45e1ad6ea9c\",\"id\":\"2ff33db8d1e94bcbaf9ba45e1ad6ea9c\",\"refname\":\"花70\",\"key\":\"70\",\"title\":\"花70-70\"},{\"rownum_\":6,\"login_name\":\"73\",\"name\":\"花73\",\"refcode\":\"73\",\"refpk\":\"6d8328debfc94d5b8446f58d2b0b3cdc\",\"id\":\"6d8328debfc94d5b8446f58d2b0b3cdc\",\"refname\":\"花73\",\"key\":\"73\",\"title\":\"花73-73\"},{\"rownum_\":7,\"login_name\":\"76\",\"name\":\"花76\",\"refcode\":\"76\",\"refpk\":\"7768b51dc14544669f2cffa840edb049\",\"id\":\"7768b51dc14544669f2cffa840edb049\",\"refname\":\"花76\",\"key\":\"76\",\"title\":\"花76-76\"},{\"rownum_\":8,\"login_name\":\"80\",\"name\":\"花80\",\"refcode\":\"80\",\"refpk\":\"a89cc45ed1ec49f19bb608c18c958359\",\"id\":\"a89cc45ed1ec49f19bb608c18c958359\",\"refname\":\"花80\",\"key\":\"80\",\"title\":\"花80-80\"},{\"rownum_\":9,\"login_name\":\"78\",\"name\":\"花78\",\"refcode\":\"78\",\"refpk\":\"438d0cce9ae442e586940a582c7ee054\",\"id\":\"438d0cce9ae442e586940a582c7ee054\",\"refname\":\"花78\",\"key\":\"78\",\"title\":\"花78-78\"},{\"rownum_\":10,\"login_name\":\"79\",\"name\":\"花79\",\"refcode\":\"79\",\"refpk\":\"60adbcb7d4cb49449bc7879dd4fbf1f5\",\"id\":\"60adbcb7d4cb49449bc7879dd4fbf1f5\",\"refname\":\"花79\",\"key\":\"79\",\"title\":\"花79-79\"},{\"login_name\":\"zhao\",\"refpk\":\"14e0220f-1a86-4861-8f74-f7134cb3235b\",\"id\":\"14e0220f-1a86-4861-8f74-f7134cb3235b\",\"refcode\":\"zhao\",\"name\":\"赵宇\",\"refname\":\"赵宇\",\"key\":\"zhao\",\"title\":\"赵宇-zhao\"},{\"login_name\":\"chen\",\"refpk\":\"14e0220f-1a86-4861-8f74-f71343333b5b\",\"id\":\"14e0220f-1a86-4861-8f74-f71343333b5b\",\"refcode\":\"chen\",\"name\":\"陈辉\",\"refname\":\"陈辉\",\"key\":\"chen\",\"title\":\"陈辉-chen\"},{\"login_name\":\"yue\",\"refpk\":\"14e0220f-1a86-4861-8f74-545454547489\",\"id\":\"14e0220f-1a86-4861-8f74-545454547489\",\"refcode\":\"yue\",\"name\":\"岳明\",\"refname\":\"岳明\",\"key\":\"yue\",\"title\":\"岳明-yue\"},{\"login_name\":\"xiao\",\"refpk\":\"14e0220f-1a86-4861-8f74-543434537379\",\"id\":\"14e0220f-1a86-4861-8f74-543434537379\",\"refcode\":\"xiao\",\"name\":\"小羽\",\"refname\":\"小羽\",\"key\":\"xiao\",\"title\":\"小羽-xiao\"},{\"login_name\":\"123\",\"refpk\":\"14e0220f-1a86-4861-8f74-334455643336\",\"id\":\"14e0220f-1a86-4861-8f74-334455643336\",\"refcode\":\"123\",\"name\":\"123\",\"refname\":\"123\",\"key\":\"123\",\"title\":\"123-123\"},{\"login_name\":\"huang\",\"refpk\":\"14e0220f-1a86-4861-8f74-333387127390\",\"id\":\"14e0220f-1a86-4861-8f74-333387127390\",\"refcode\":\"huang\",\"name\":\"黄东东\",\"refname\":\"黄东东\",\"key\":\"huang\",\"title\":\"黄东东-huang\"},{\"login_name\":\"liu\",\"refpk\":\"14e0220f-1a86-4861-8f74-3332332kjffo\",\"id\":\"14e0220f-1a86-4861-8f74-3332332kjffo\",\"refcode\":\"liu\",\"name\":\"刘志鹏\",\"refname\":\"刘志鹏\",\"key\":\"liu\",\"title\":\"刘志鹏-liu\"},{\"login_name\":\"liukunlin\",\"refpk\":\"14e0220f-1a86-4861-8f74-23323e321263\",\"id\":\"14e0220f-1a86-4861-8f74-23323e321263\",\"refcode\":\"liukunlin\",\"name\":\"刘坤琳\",\"refname\":\"刘坤琳\",\"key\":\"liukunlin\",\"title\":\"刘坤琳-liukunlin\"}];\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\t\tconst dataList = [];\r\n\t\tconst generateList = (data) => {\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tconst node = data[i];\r\n\t\t\t\tconst key = node[valueField];\r\n\t\t\t\tconst title = node.refname;\r\n\t\t\t\tdataList.push({\r\n\t\t\t\t\tkey,\r\n\t\t\t\t\ttitle\r\n\t\t\t\t});\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tgenerateList(node.children, node.key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tgenerateList(nextProps.data);\r\n\t\tthis.setState({\r\n\t\t\tdataList\r\n\t\t})\r\n\t}\r\n\r\n    handleTransferChange = (nextTargetKeys, direction, moveKeys) => {\r\n        this.setState({ targetKeys: nextTargetKeys });\r\n\r\n        console.log('targetKeys: ', nextTargetKeys);\r\n        console.log('direction: ', direction);\r\n        console.log('moveKeys: ', moveKeys);\r\n    }\r\n\r\n    handleTransferSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n        this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\r\n    \r\n        console.log('sourceSelectedKeys: ', sourceSelectedKeys);\r\n        console.log('targetSelectedKeys: ', targetSelectedKeys);\r\n    }\r\n\r\n    handleTreeSelect = (selectNode = {}) => {\r\n        let {targetKeys,transferData}  = this.state;\r\n        let startFlag,endFlag;\r\n        if(selectNode.refcode===\"fzl\"){\r\n            startFlag = 10;\r\n            endFlag = 18\r\n        }else if(selectNode.refcode === 'wujd'){\r\n            startFlag = 0;\r\n            endFlag = 10;\r\n        }else{\r\n            startFlag=0;\r\n            endFlag=18;\r\n        }\r\n        let selectedData = this.transferData.filter(v => {\r\n\t\t\treturn targetKeys.some(key => key == v['refcode'])\r\n\t\t});\r\n\t\tlet temp = this.transferData.slice(startFlag,endFlag)\r\n        let tempTransferData = temp.concat(selectedData);\r\n        console.log('=====',targetKeys,'=====')\r\n\t\tthis.setState({\r\n\t\t\ttransferData:tempTransferData,\r\n\t\t});\r\n\t}\r\n\r\n    onTreeSelect = (selectedKeys, e) => {\r\n\t\tif (selectedKeys.length === 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tvar fullInfo = {};\r\n\t\tconst loopSearch = (arr, key) => {\r\n\t\t\tif (!arr) { return }\r\n\t\t\tfor (let i = 0; i < arr.length; i++) {\r\n\t\t\t\tif (arr[i][valueField] == key) {\r\n\t\t\t\t\tfullInfo = arr[i];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloopSearch(arr[i].children, key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        loopSearch(treeData, selectedKeys[0])\r\n\t\tthis.handleTreeSelect(fullInfo)\r\n    }\r\n    \r\n    onExpand = (expandedKeys) => {\r\n        this.setState({\r\n            expandedKeys,\r\n            autoExpandParent: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedKeys,\r\n\t\t\texpandedKeys,\r\n            autoExpandParent,\r\n            transferData,\r\n            targetKeys\r\n\t\t} = this.state;\r\n        const loop = treeData => treeData.map((item) => {\r\n            if (item.children && item.children.length > 0) {\r\n                return (\r\n                    <TreeNode key={item[valueField]} title={item.refname}>\r\n                        {loop(item.children)}\r\n                    </TreeNode>\r\n                );\r\n            }\r\n            return <TreeNode key={item[valueField]} title={item.refname} isLeaf={true} />;\r\n        });\r\n        return (\r\n        <div className=\"demo8\">\r\n            <Tree\r\n                checkStrictly={false}\r\n                multiple={false}\r\n                onExpand={this.onExpand}\r\n                defaultExpandAll={true}\r\n                expandedKeys={expandedKeys}\r\n                autoExpandParent={autoExpandParent}\r\n                onSelect={this.onTreeSelect}\r\n            >\r\n                {loop(treeData)}\r\n            </Tree>\r\n            <Transfer\r\n            dataSource={transferData}\r\n            targetKeys={targetKeys}\r\n            selectedKeys={selectedKeys}\r\n            onChange={this.handleTransferChange}\r\n            onSelectChange={this.handleTransferSelectChange}\r\n            render={item => item.title}\r\n            />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Demo8\r\n","desc":" 结合 Tree 和 Transfer 的使用示例，解决多级数据穿梭问题。","scss_code":".demo8{\r\n    .u-tree{\r\n        max-width: 220px;\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        width: 220px;\r\n        max-height: 525px;\r\n        box-sizing: border-box;\r\n        text-align: left;\r\n    }\r\n    .u-transfer{\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        width: calc(100% - 235px);\r\n        max-height: 525px;\r\n        box-sizing: border-box;\r\n        text-align: left;\r\n        overflow: auto;\r\n    }\r\n}"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={12} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('tinperBeeDemo'));
